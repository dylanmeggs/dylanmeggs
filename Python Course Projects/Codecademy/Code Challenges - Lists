#1. APPEND SIZE
#Create a function called append_size() that has one parameter named my_list.
#The function should append the size of my_list (inclusive) to the end of my_list. The function should then return this new list.

#Write your function here
def append_size(my_list):
  list_size = len(my_list)
  my_list.append(list_size)
  return my_list

print(append_size([23, 42, 108]))

# Simplified version:
def append_size(my_list):
  my_list.append(len(my_list))
  return my_list


#2. APPEND SUM
#Write a function named append_sum() that has one parameter — a list named named my_list.
#The function should add the last two elements of my_list together and append the result to my_list. It should do this process three times and then return my_list.
#For example, if my_list started as [1, 1, 2], the final result should be [1, 1, 2, 3, 5, 8].

#Write your function here
def append_sum(my_list):
  for i in range(3):
    my_list.append(sum(my_list[-2:]))
  return my_list

print(append_sum([1, 1, 2]))



#3. LARGER LIST
#Write a function named larger_list() that has two parameters named my_list1 and my_list2.
#The function should return the last element of the list that contains more elements. If both lists are the same size, then return the last element of my_list1.

#Write your function here
def larger_list(my_list1, my_list2):
  if len(my_list1) > len(my_list2):
    return my_list1[-1]
  elif len(my_list2) > len(my_list1):
    return my_list2[-1]
  elif len(my_list1) == len(my_list2):
    return my_list1[-1]

print(larger_list([4, 10, 2, 5], [-10, 2, 5, 10]))



#4. MORE THAN N
# Our factory produces a variety of different flavored snacks. The different types of snacks are represented by their id and are kept on a conveyor belt. We want to check if we have enough items of a certain snack in our inventory. For this, we need to write a Python function that does the following.

# The function should accept a list of numbers representing the ids of snack on the conveyor belt as its first input, the id of snack we are looking for as its second input, and the desired number of that type of snack on the conveyor belt as its third input.
# The function should return True if the snack we are searching for appears more times in the list than the desired number given in the third parameter. Otherwise, it should return False.
# Following are the steps we need to implement the above scenario:

# Define the function to accept three parameters: a list of numbers, a number to look for, and a number for the number of instances.
# Count the number of occurrences of item i.e. the second parameter in my_list i.e. the first parameter.
# If the number of occurrences is greater than n i.e. the third parameter, return True. Otherwise, return False.

#Write your function here
def more_than_n(my_list, item, n):
  if my_list.count(item) > n:
    return True
  else:
    return False

print(more_than_n([2, 4, 6, 2, 3, 2, 1, 2], 2, 3))



#5. COMBINE SORT
# Finally, let’s create a function that combines two different lists together and then sorts them. To do this, we can combine the lists with an operation and then sort using a function call. Here are the steps we need to use:

# Define the function to accept two parameters, one for each list.
# Combine the two lists using the + operator.
# Sort the resultant list after concatenation.
# Return the sorted list.

#Write your function here
def combine_sort(my_list1, my_list2):
  new_list = sorted(my_list1 + my_list2)
  return new_list

print(combine_sort([4, 10, 2, 5], [-10, 2, 5, 10]))



#6. EVERY THREE NUMBERS
#Create a function called every_three_nums that has one parameter named start.
#The function should return a list of every third number between start and 100 (inclusive). For example, every_three_nums(91) should return the list [91, 94, 97, 100]. If start is greater than 100, the function should return an empty list.

#Write your function here
def every_three_nums(start):
  return list(range(start,101,3))

print(every_three_nums(91))



#7. REMOVE MIDDLE
#Create a function named remove_middle which has three parameters named my_list, start, and end.
#The function should return a list where all elements in my_list with an index between start and end (inclusive) have been removed.

#Write your function here
def remove_middle(my_list, start, end):
  return my_list[:start] + my_list[end+1:]

print(remove_middle([4, 8, 15, 16, 23, 42], 1, 3))


#8. MORE FREQUENT ITEM
#Create a function named more_frequent_item that has three parameters named my_list, item1, and item2.
#Return either item1 or item2 depending on which item appears more often in my_list.
#If the two items appear the same number of times, return item1.

#Write your function here
def more_frequent_item(my_list, item1, item2):
  if my_list.count(item1) == my_list.count(item2):
    return item1
  elif my_list.count(item1) > my_list.count(item2):
    return item1
  elif my_list.count(item2) > my_list.count(item1):
    return item2

print(more_frequent_item([2, 3, 3, 2, 3, 2, 3, 2, 3], 2, 3))



#9. DOUBLE INDEX
#Create a function named double_index that has two parameters: a list named my_list and a single number named index.
#The function should return a new list where all elements are the same as in my_list except for the element at index. The element at index should be double the value of the element at index of the original my_list.
#If index is not a valid index, the function should return the original list.

#Write your function here
def double_index(my_list, index):
  if index >= len(my_list):
    return my_list
  else:
    my_list.insert(index, my_list[index] * 2)
    my_list.pop(index+1)
  return my_list

print(double_index([3, 8, -10, 12], 2))



#10. MIDDLE ITEM
#Create a function called middle_element that has one parameter named my_list.
#If there are an odd number of elements in my_list, the function should return the middle element. If there are an even number of elements, the function should return the average of the middle two elements.

#Write your function here
def middle_element(my_list):
  length = len(my_list)
  if length % 2 == 0:
    sum = my_list[int(length/2)] + my_list[int((length/2)-1)]
    return sum / 2
  else: 
    return my_list[int((length-1)/2)]

print(middle_element([5, 2, -10, -4, 4, 5]))
